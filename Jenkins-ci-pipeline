pipeline {
    agent any

    stages {
        stage('Get Source Code') {
            steps {
                echo 'Cloning / pulling the latest code'
		            git 'https://github.com/anjali1726/FlaskAppTest.git'
            }
        }
  	stage('Py Env Preparation'){
  	   steps{
      		sh '''#!/bin/bash
      		source ~/.bashrc
      		pyenv versions

      		pyenv global 3.8.0'''
  	   }
  	}
    stage('Py Venv Setup'){
      steps{
        sh '''echo "#### Create venv and activate it python version 3.8.0 ####"
        python3 -m venv flaskapp
        source flaskapp/bin/activate
        python3 -V

        echo "##### Install required Python Modules ####"
        pip install -r requirements.txt

        # Cobertura - Code Coverage
        pip install coverage
        pip install pytest-cov'''
      }    
    }
    stage('Running Coverage Metrics'){
      steps{
        sh returnStatus: true, script: '''echo \'#### Run Coverage Metrics ####\'
        source flaskapp/bin/activate
        pytest --cov=main --cov-report xml'''
      }
      post {
        success {
          // One or more steps need to be included within each condition's block.
          cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
        }
      }
    }
    stage('Running Unit Test Cases'){
      steps{
        sh returnStatus: true, script: '''echo \'#### Run Unit tests ####\'
        source flaskapp/bin/activate
        pytest utests --junitxml=./xmlReport/output.xml'''
      }
      post {
        success {
          // One or more steps need to be included within each condition's block.
          junit skipMarkingBuildUnstable: true, stdioRetention: '', testResults: 'xmlReport/output.xml'
        }
      }
    }
  }
}
